{layout '@layout.latte'}
{var $active = 'constant'}

{block title}{if $constant->isDeprecated()}Deprecated {/if}Constant {$constant->getName()}{/block}

{block content}
<div id="content" class="constant">
	<h1 n:class="$constant->isDeprecated() ? deprecated">Constant {$constant->getShortName()}</h1>

	{if $constant->isValid()}

	<div class="description" n:if="$template->longDescription($constant)">
	{$constant|longDescription|noescape}
	</div>

	<div class="info">
		{if $constant->inNamespace()}<b>Namespace:</b> {$constant->getNamespaceName()|namespaceLinks|noescape}<br>{/if}
		{if $constant->inPackage()}<b>Package:</b> {$constant->getPackageName()|packageLinks|noescape}<br>{/if}
		{foreach $template->annotationFilter($constant->annotations, array('var')) as $annotation => $values}
			{foreach $values as $value}
				<b>{$annotation|annotationBeautify}{if $value}:{/if}</b>
				{$value|annotation:$annotation:$constant|noescape}<br>
			{/foreach}
		{/foreach}
		<b>Located at</b>
		<a n:tag-if="$config->sourceCode" href="{$constant|sourceUrl}" title="Go to source code">
			{$constant->getFileName()|relativePath}
		</a><br>
	</div>

	{var $annotations = $constant->getAnnotations()}

	<table class="summary" id="vars">
	<caption>Value summary</caption>
	<tr>
		<td class="name"><code>{$constant->getTypeHint()|typeLinks:$constant|noescape}</code></td>
		<td class="value">{block|strip}
			{var $element = $template->resolveElement($constant->getValueDefinition(), $constant)}
			{if $element}<a href="{$element|constantUrl}">{$constant->getValueDefinition()}</a>{else}<code>{$constant->getValueDefinition()|highlightValue:$constant|noescape}</code>{/if}
		{/block}</td>
	</tr>
	</table>

	{else}
		<div class="invalid">
			<p>
				Documentation of this constant could not be generated.
			</p>
			<p>
				Constant was originally declared in {$constant->getFileName()|relativePath} and is invalid because of:
			</p>
			<ul>
				<li n:foreach="$constant->reasons as $reason">Constant was redeclared in {$reason->getSender()->getFileName()|relativePath}.</li>
			</ul>
		</div>
	{/if}
</div>
{/block}
